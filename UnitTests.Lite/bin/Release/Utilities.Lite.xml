<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Utilities.Lite</name>
  </assembly>
  <members>
    <member name="T:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions">
      <summary>
            IEnumerable extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
      <summary>
            Combines multiple IEnumerables together and returns a new IEnumerable containing all of the values
            </summary>
      <typeparam name="T">Type of the data in the IEnumerable</typeparam>
      <param name="Enumerable1">IEnumerable 1</param>
      <param name="Additions">IEnumerables to concat onto the first item</param>
      <returns>A new IEnumerable containing all values</returns>
      <example>
        <code>
             int[] TestObject1 = new int[] { 1, 2, 3 };
             int[] TestObject2 = new int[] { 4, 5, 6 };
             int[] TestObject3 = new int[] { 7, 8, 9 };
             TestObject1 = TestObject1.Concat(TestObject2, TestObject3).ToArray();
            </code>
      </example>
      <requires description="Enumerable1" exception="T:System.ArgumentNullException" csharp="Enumerable1 != null" vb="Enumerable1 &lt;&gt; Nothing">Enumerable1 != null</requires>
      <exception cref="T:System.ArgumentNullException">Enumerable1 == null</exception>
      <requires description="Additions" exception="T:System.ArgumentNullException" csharp="Additions != null" vb="Additions &lt;&gt; Nothing">Additions != null</requires>
      <exception cref="T:System.ArgumentNullException">Additions == null</exception>
      <requires description="Additions" exception="T:System.ArgumentNullException" csharp="for all x in Additions x != null" vb="for all x in Additions x &lt;&gt; Nothing">for all x in Additions x != null</requires>
      <exception cref="T:System.ArgumentNullException">!(Contract.ForAll(Additions, x =&gt; x != null))</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ElementsBetween``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
      <summary>
            Returns elements starting at the index and ending at the end index
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">List to search</param>
      <param name="Start">Start index (inclusive)</param>
      <param name="End">End index (exclusive)</param>
      <returns>The items between the start and end index</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Action{``0})">
      <summary>
            Does an action for each item in the IEnumerable between the start and end indexes
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Start">Item to start with</param>
      <param name="End">Item to end with</param>
      <param name="Action">Action to do</param>
      <returns>The original list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Action" exception="T:System.ArgumentNullException" csharp="Action != null" vb="Action &lt;&gt; Nothing">Action != null</requires>
      <exception cref="T:System.ArgumentNullException">Action == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.For``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>
            Does a function for each item in the IEnumerable between the start and end indexes and returns an IEnumerable of the results
            </summary>
      <typeparam name="T">Object type</typeparam>
      <typeparam name="R">Return type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Start">Item to start with</param>
      <param name="End">Item to end with</param>
      <param name="Function">Function to do</param>
      <returns>The resulting list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Function" exception="T:System.ArgumentNullException" csharp="Function != null" vb="Function &lt;&gt; Nothing">Function != null</requires>
      <exception cref="T:System.ArgumentNullException">Function == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Does an action for each item in the IEnumerable
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Action">Action to do</param>
      <returns>The original list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Action" exception="T:System.ArgumentNullException" csharp="Action != null" vb="Action &lt;&gt; Nothing">Action != null</requires>
      <exception cref="T:System.ArgumentNullException">Action == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
      <typeparam name="T">Object type</typeparam>
      <typeparam name="R">Return type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Function">Function to do</param>
      <returns>The resulting list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Function" exception="T:System.ArgumentNullException" csharp="Function != null" vb="Function &lt;&gt; Nothing">Function != null</requires>
      <exception cref="T:System.ArgumentNullException">Function == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0})">
      <summary>
            Does an action for each item in the IEnumerable
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Action">Action to do</param>
      <param name="CatchAction">Action that occurs if an exception occurs</param>
      <returns>The original list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Action" exception="T:System.ArgumentNullException" csharp="Action != null" vb="Action &lt;&gt; Nothing">Action != null</requires>
      <exception cref="T:System.ArgumentNullException">Action == null</exception>
      <requires description="CatchAction" exception="T:System.ArgumentNullException" csharp="CatchAction != null" vb="CatchAction &lt;&gt; Nothing">CatchAction != null</requires>
      <exception cref="T:System.ArgumentNullException">CatchAction == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Action{``0})">
      <summary>
            Does a function for each item in the IEnumerable, returning a list of the results
            </summary>
      <typeparam name="T">Object type</typeparam>
      <typeparam name="R">Return type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Function">Function to do</param>
      <param name="CatchAction">Action that occurs if an exception occurs</param>
      <returns>The resulting list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="Function" exception="T:System.ArgumentNullException" csharp="Function != null" vb="Function &lt;&gt; Nothing">Function != null</requires>
      <exception cref="T:System.ArgumentNullException">Function == null</exception>
      <requires description="CatchAction" exception="T:System.ArgumentNullException" csharp="CatchAction != null" vb="CatchAction &lt;&gt; Nothing">CatchAction != null</requires>
      <exception cref="T:System.ArgumentNullException">CatchAction == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.Last``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Returns the last X number of items from the list
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">IEnumerable to iterate over</param>
      <param name="Count">Numbers of items to return</param>
      <returns>The last X items from the list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.PositionOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines the position of an object if it is present, otherwise it returns -1
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="List">List of objects to search</param>
      <param name="Object">Object to find the position of</param>
      <param name="EqualityComparer">Equality comparer used to determine if the object is present</param>
      <returns>The position of the object if it is present, otherwise -1</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.Remove``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
            Removes values from a list that meet the criteria set forth by the predicate
            </summary>
      <typeparam name="T">Value type</typeparam>
      <param name="Value">List to cull items from</param>
      <param name="Predicate">Predicate that determines what items to remove</param>
      <returns>An IEnumerable with the objects that meet the criteria removed</returns>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="new Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.&lt;&gt;c__DisplayClass3&lt;T&gt;(){
    Predicate = Predicate, 
}.Predicate != null" vb="(() =&gt; {
    Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.&lt;&gt;c__DisplayClass3&lt;T&gt; local_0_prime = New Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.&lt;&gt;c__DisplayClass3(Of T)();
    (local_0_prime.Predicate = Predicate)
    return local_0_prime; })().Predicate &lt;&gt; Nothing">new Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.&lt;&gt;c__DisplayClass3&lt;T&gt;(){
    Predicate = Predicate, 
}.Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Converts a list to an array
            </summary>
      <typeparam name="Source">Source type</typeparam>
      <typeparam name="Target">Target type</typeparam>
      <param name="List">List to convert</param>
      <param name="ConvertingFunction">Function used to convert each item</param>
      <returns>The array containing the items from the list</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="ConvertingFunction" exception="T:System.ArgumentNullException" csharp="ConvertingFunction != null" vb="ConvertingFunction &lt;&gt; Nothing">ConvertingFunction != null</requires>
      <exception cref="T:System.ArgumentNullException">ConvertingFunction == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
            Converts an IEnumerable to a list
            </summary>
      <typeparam name="Source">Source type</typeparam>
      <typeparam name="Target">Target type</typeparam>
      <param name="List">IEnumerable to convert</param>
      <param name="ConvertingFunction">Function used to convert each item</param>
      <returns>The list containing the items from the IEnumerable</returns>
      <requires description="List" exception="T:System.ArgumentNullException" csharp="List != null" vb="List &lt;&gt; Nothing">List != null</requires>
      <exception cref="T:System.ArgumentNullException">List == null</exception>
      <requires description="ConvertingFunction" exception="T:System.ArgumentNullException" csharp="ConvertingFunction != null" vb="ConvertingFunction &lt;&gt; Nothing">ConvertingFunction != null</requires>
      <exception cref="T:System.ArgumentNullException">ConvertingFunction == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IEnumerableExtensions.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
      <summary>
            Converts the list to a string where each item is seperated by the Seperator
            </summary>
      <typeparam name="T">Item type</typeparam>
      <param name="List">List to convert</param>
      <param name="ItemOutput">Used to convert the item to a string (defaults to calling ToString)</param>
      <param name="Seperator">Seperator to use between items (defaults to ,)</param>
      <returns>The string version of the list</returns>
    </member>
    <member name="T:Utilities.DataTypes.Comparison.GenericComparer`1">
      <summary>
            Generic IComparable class
            </summary>
      <typeparam name="T">Data type</typeparam>
    </member>
    <member name="M:Utilities.DataTypes.Comparison.GenericComparer`1.Compare(`0,`0)">
      <summary>
            Compares the two objects
            </summary>
      <param name="x">Object 1</param>
      <param name="y">Object 2</param>
      <returns>0 if they're equal, any other value they are not</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.ArrayExtensions">
      <summary>
            Array extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ArrayExtensions.Clear(System.Array)">
      <summary>
            Clears the array completely
            </summary>
      <param name="Array">Array to clear</param>
      <returns>The final array</returns>
      <example>
        <code>
             int[] TestObject = new int[] { 1, 2, 3, 4, 5, 6 };
             TestObject.Clear();
            </code>
      </example>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ArrayExtensions.Clear``1(``0[])">
      <summary>
            Clears the array completely
            </summary>
      <param name="Array">Array to clear</param>
      <typeparam name="ArrayType">Array type</typeparam>
      <returns>The final array</returns>
      <example>
        <code>
             int[] TestObject = new int[] { 1, 2, 3, 4, 5, 6 };
             TestObject.Clear();
            </code>
      </example>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ArrayExtensions.Concat``1(``0[],``0[][])">
      <summary>
            Combines multiple arrays together and returns a new array containing all of the values
            </summary>
      <typeparam name="T">Type of the data in the arrays</typeparam>
      <param name="Array1">Array 1</param>
      <param name="Additions">Arrays to concat onto the first item</param>
      <returns>A new array containing all values</returns>
      <example>
        <code>
             int[] TestObject1 = new int[] { 1, 2, 3 };
             int[] TestObject2 = new int[] { 4, 5, 6 };
             int[] TestObject3 = new int[] { 7, 8, 9 };
             TestObject1 = TestObject1.Concat(TestObject2, TestObject3);
            </code>
      </example>
      <requires description="Array1" exception="T:System.ArgumentNullException" csharp="Array1 != null" vb="Array1 &lt;&gt; Nothing">Array1 != null</requires>
      <exception cref="T:System.ArgumentNullException">Array1 == null</exception>
      <requires description="Additions" exception="T:System.ArgumentNullException" csharp="Additions != null" vb="Additions &lt;&gt; Nothing">Additions != null</requires>
      <exception cref="T:System.ArgumentNullException">Additions == null</exception>
      <requires description="Additions" exception="T:System.ArgumentNullException" csharp="for all x in Additions x != null" vb="for all x in Additions x &lt;&gt; Nothing">for all x in Additions x != null</requires>
      <exception cref="T:System.ArgumentNullException">!(Contract.ForAll(Additions, x =&gt; x != null))</exception>
    </member>
    <member name="T:Utilities.DataTypes.Comparison.GenericEqualityComparer`1">
      <summary>
            Generic equality comparer
            </summary>
      <typeparam name="T">Data type</typeparam>
    </member>
    <member name="M:Utilities.DataTypes.Comparison.GenericEqualityComparer`1.Equals(`0,`0)">
      <summary>
            Determines if the two items are equal
            </summary>
      <param name="x">Object 1</param>
      <param name="y">Object 2</param>
      <returns>True if they are, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.Comparison.GenericEqualityComparer`1.GetHashCode(`0)">
      <summary>
            Get hash code
            </summary>
      <param name="obj">Object to get the hash code of</param>
      <returns>The object's hash code</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions">
      <summary>
            Generic extensions dealing with objects
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``1(``0,System.Action{``0},``0)">
      <summary>
            Allows actions to be chained together with the caveat that if Object is null,
            it is replaced with the DefaultObjectValue specified.
            If the Action or Object (once replaced with the default object value) is null, it will return the object.
            </summary>
      <typeparam name="T">The type of the object</typeparam>
      <param name="Object">Object to run the action on</param>
      <param name="Action">Action to run</param>
      <param name="DefaultObjectValue">Default object value</param>
      <returns>The original object</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Chain``2(``0,System.Func{``0,``1},``1,``0)">
      <summary>
            Allows actions to be chained together. It also has a couple of checks in there:
            1) If the function is null, it returns the default return value specified.
            2) If the object is null, it will replace it with the default object value specified.
            3) If the object, once replaced with the default object value specified, is null, it will return the default return value specified.
            4) If the return value from the function is null, it returns the default return value specified.
            </summary>
      <typeparam name="T">The type of the object</typeparam>
      <typeparam name="R">Return type</typeparam>
      <param name="Object">Object to run the action on</param>
      <param name="Function">Function to run</param>
      <param name="DefaultObjectValue">Default object value</param>
      <param name="DefaultReturnValue">Default return value</param>
      <returns>The result from the function</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Check``1(``0,System.Predicate{``0},``0)">
      <summary>
            Checks to see if the object meets all the criteria. If it does, it returns the object. If it does not, it returns the default object
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="Object">Object to check</param>
      <param name="DefaultValue">The default value to return</param>
      <param name="Predicate">Predicate to check the object against</param>
      <returns>The default object if it fails the criteria, the object otherwise</returns>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="Predicate != null" vb="Predicate &lt;&gt; Nothing">Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Check``1(``0,System.Predicate{``0},System.Func{``0})">
      <summary>
            Checks to see if the object meets all the criteria. If it does, it returns the object. If it does not, it returns the default object
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="Object">Object to check</param>
      <param name="DefaultValue">The default value to return</param>
      <param name="Predicate">Predicate to check the object against</param>
      <returns>The default object if it fails the criteria, the object otherwise</returns>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="Predicate != null" vb="Predicate &lt;&gt; Nothing">Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
      <requires description="DefaultValue" exception="T:System.ArgumentNullException" csharp="DefaultValue != null" vb="DefaultValue &lt;&gt; Nothing">DefaultValue != null</requires>
      <exception cref="T:System.ArgumentNullException">DefaultValue == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Check``1(``0,``0)">
      <summary>
            Checks to see if the object is null. If it is, it returns the default object, otherwise the object is returned.
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="Object">Object to check</param>
      <param name="DefaultValue">The default value to return</param>
      <returns>The default object if it is null, the object otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Check``1(``0,System.Func{``0})">
      <summary>
            Checks to see if the object is null. If it is, it returns the default object, otherwise the object is returned.
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="Object">Object to check</param>
      <param name="DefaultValue">The default value to return</param>
      <returns>The default object if it is null, the object otherwise</returns>
      <requires description="DefaultValue" exception="T:System.ArgumentNullException" csharp="DefaultValue != null" vb="DefaultValue &lt;&gt; Nothing">DefaultValue != null</requires>
      <exception cref="T:System.ArgumentNullException">DefaultValue == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Is``1(``0,System.Predicate{``0}[])">
      <summary>
            Determines if the object passes the set of predicates passed in
            </summary>
      <typeparam name="T">Object type</typeparam>
      <param name="Object">Object to test</param>
      <param name="Predicates">Predicates to test</param>
      <returns>True if the object passes all of the predicates, false otherwise</returns>
      <requires description="Predicates" exception="T:System.ArgumentNullException" csharp="Predicates != null" vb="Predicates &lt;&gt; Nothing">Predicates != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicates == null</exception>
      <requires description="Predicates" exception="T:System.ArgumentNullException" csharp="for all x in Predicates x != null" vb="for all x in Predicates x &lt;&gt; Nothing">for all x in Predicates x != null</requires>
      <exception cref="T:System.ArgumentNullException">!(Contract.ForAll(Predicates, x =&gt; x != null))</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Is``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Determines if the object is equal to a specific value
            </summary>
      <typeparam name="T" />
      <param name="Object" />
      <param name="ComparisonObject" />
      <param name="Comparer" />
      <returns />
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Times``1(System.Int32,System.Func{System.Int32,``0})">
      <summary>
            Runs a function based on the number of times specified and returns the results
            </summary>
      <typeparam name="T">Type that gets returned</typeparam>
      <param name="Count">Number of times the function should run</param>
      <param name="Function">The function that should run</param>
      <returns>The results from the function</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.GenericObjectExtensions.Times(System.Int32,System.Action{System.Int32})">
      <summary>
            Runs an action based on the number of times specified
            </summary>
      <param name="Count">Number of times to run the action</param>
      <param name="Action">Action to run</param>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions">
      <summary>
            DateTime extension methods
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
      <summary>
            Adds the number of weeks to the date
            </summary>
      <param name="Date">Date input</param>
      <param name="NumberOfWeeks">Number of weeks to add</param>
      <returns>The date after the number of weeks are added</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.Age(System.DateTime,System.DateTime)">
      <summary>
            Calculates age based on date supplied
            </summary>
      <param name="Date">Birth date</param>
      <param name="CalculateFrom">Date to calculate from</param>
      <returns>The total age in years</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.ConvertToTimeZone(System.DateTime,System.TimeZoneInfo)">
      <summary>
            Converts a DateTime to a specific time zone
            </summary>
      <param name="Date">DateTime to convert</param>
      <param name="TimeZone">Time zone to convert to</param>
      <returns>The converted DateTime</returns>
      <requires description="TimeZone" exception="T:System.ArgumentNullException" csharp="TimeZone != null" vb="TimeZone &lt;&gt; Nothing">TimeZone != null</requires>
      <exception cref="T:System.ArgumentNullException">TimeZone == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.DaysInMonth(System.DateTime)">
      <summary>
            Returns the number of days in the month
            </summary>
      <param name="Date">Date to get the month from</param>
      <returns>The number of days in the month</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInMonth(System.DateTime)">
      <summary>
            Gets the number of days left in the month based on the date passed in
            </summary>
      <param name="Date">The date to check against</param>
      <returns>The number of days left in a month</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInYear(System.DateTime)">
      <summary>
            Gets the number of days left in a year based on the date passed in
            </summary>
      <param name="Date">The date to check against</param>
      <returns>The number of days left in a year</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.DaysLeftInWeek(System.DateTime)">
      <summary>
            Gets the number of days left in a week
            </summary>
      <param name="Date">The date to check against</param>
      <returns>The number of days left in a week</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.EndOfDay(System.DateTime)">
      <summary>
            Returns the end of the day
            </summary>
      <param name="Input">Input date</param>
      <returns>The end of the day</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfMonth(System.DateTime)">
      <summary>
            Returns the first day of a month based on the date sent in
            </summary>
      <param name="Date">Date to get the first day of the month from</param>
      <returns>The first day of the month</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfQuarter(System.DateTime,System.DateTime)">
      <summary>
            Returns the first day of a quarter based on the date sent in
            </summary>
      <param name="Date">Date to get the first day of the quarter from</param>
      <param name="Quarter1Start">Beginning of the first quarter (defaults to the beginning of the year)</param>
      <returns>The first day of the quarter</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Returns the first day of a week based on the date sent in
            </summary>
      <param name="Date">Date to get the first day of the week from</param>
      <param name="CultureInfo">The culture to use (defaults to current culture)</param>
      <returns>The first day of the week</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FirstDayOfYear(System.DateTime)">
      <summary>
            Returns the first day of a year based on the date sent in
            </summary>
      <param name="Date">Date to get the first day of the year from</param>
      <returns>The first day of the year</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int32)">
      <summary>
            Returns the Unix based date as a DateTime object
            </summary>
      <param name="Date">Unix date to convert</param>
      <returns>The Unix Date in DateTime format</returns>
      <requires description="Date" exception="T:System.ArgumentOutOfRangeException" csharp="Date &lt;= int.MaxValue" vb="Date &lt;= int.MaxValue">Date &lt;= int.MaxValue</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Date &gt; int.MaxValue</exception>
      <requires description="Date" exception="T:System.ArgumentOutOfRangeException" csharp="Date &gt;= 0" vb="Date &gt;= 0">Date &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Date &lt; 0</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.FromUnixTime(System.Int64)">
      <summary>
            Returns the Unix based date as a DateTime object
            </summary>
      <param name="Date">Unix date to convert</param>
      <returns>The Unix Date in DateTime format</returns>
      <requires description="Date" exception="T:System.ArgumentOutOfRangeException" csharp="Date &lt;= 3155378975999999999" vb="Date &lt;= 3155378975999999999">Date &lt;= 3155378975999999999</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Date &gt; 0x2bca2875f4373fffL</exception>
      <requires description="Date" exception="T:System.ArgumentOutOfRangeException" csharp="Date &gt;= (long)0" vb="Date &gt;= ((Long )0)">Date &gt;= (long)0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Date &lt; 0</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.IsInFuture(System.DateTime)">
      <summary>
            Determines if the date is some time in the future
            </summary>
      <param name="Date">Date to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.IsInPast(System.DateTime)">
      <summary>
            Determines if the date is some time in the past
            </summary>
      <param name="Date">Date to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.IsToday(System.DateTime)">
      <summary>
            Is this today?
            </summary>
      <param name="Date">Date to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekDay(System.DateTime)">
      <summary>
            Determines if this is a week day
            </summary>
      <param name="Date">Date to check against</param>
      <returns>Whether this is a week day or not</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.IsWeekEnd(System.DateTime)">
      <summary>
            Determines if this is a week end
            </summary>
      <param name="Date">Date to check against</param>
      <returns>Whether this is a week end or not</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfMonth(System.DateTime)">
      <summary>
            Returns the last day of the month based on the date sent in
            </summary>
      <param name="Date">Date to get the last day from</param>
      <returns>The last day of the month</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfQuarter(System.DateTime,System.DateTime)">
      <summary>
            Returns the last day of a quarter based on the date sent in
            </summary>
      <param name="Date">Date to get the last day of the quarter from</param>
      <param name="Quarter1Start">Beginning of the first quarter (defaults to the beginning of the year)</param>
      <returns>The last day of the quarter</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
      <summary>
            Returns the last day of a week based on the date sent in
            </summary>
      <param name="Date">Date to get the last day of the week from</param>
      <param name="CultureInfo">The culture to use (defaults to current culture)</param>
      <returns>The last day of the week</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.LastDayOfYear(System.DateTime)">
      <summary>
            Returns the last day of the year based on the date sent in
            </summary>
      <param name="Date">Date to get the last day from</param>
      <returns>The last day of the year</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.LocalTimeZone(System.DateTime)">
      <summary>
            Gets the local time zone
            </summary>
      <param name="Date">Date object</param>
      <returns>The local time zone</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.RelativeTime(System.DateTime,System.DateTime)">
      <summary>
            Converts the DateTime object to string describing, relatively how long ago or how far in the future
            the input is based off of another DateTime object specified.
            ex: 
            Input=March 21, 2013
            Epoch=March 22, 2013
            returns "1 day ago"
            Input=March 22, 2013
            Epoch=March 21, 2013
            returns "1 day from now"
            </summary>
      <param name="Input">Input</param>
      <param name="Epoch">DateTime object that the input is comparred to</param>
      <returns>The difference between the input and epoch expressed as a string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the time portion of a specific date
            </summary>
      <param name="Date">Date input</param>
      <param name="Hour">Hour to set</param>
      <param name="Minutes">Minutes to set</param>
      <param name="Seconds">Seconds to set</param>
      <returns>Sets the time portion of the specified date</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
      <summary>
            Sets the time portion of a specific date
            </summary>
      <param name="Date">Date input</param>
      <param name="Time">Time to set</param>
      <returns>Sets the time portion of the specified date</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.ToUnix(System.DateTime)">
      <summary>
            Returns the date in Unix format
            </summary>
      <param name="Date">Date to convert</param>
      <returns>The date in Unix format</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DateTimeExtensions.UTCOffset(System.DateTime)">
      <summary>
            Gets the UTC offset
            </summary>
      <param name="Date">Date to get the offset of</param>
      <returns>UTC offset</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.TimeSpanExtensions">
      <summary>
            TimeSpan extension methods
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TimeSpanExtensions.DaysRemainder(System.TimeSpan)">
      <summary>
            Days in the TimeSpan minus the months and years
            </summary>
      <param name="Span">TimeSpan to get the days from</param>
      <returns>The number of days minus the months and years that the TimeSpan has</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TimeSpanExtensions.Months(System.TimeSpan)">
      <summary>
            Months in the TimeSpan
            </summary>
      <param name="Span">TimeSpan to get the months from</param>
      <returns>The number of months that the TimeSpan has</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TimeSpanExtensions.Years(System.TimeSpan)">
      <summary>
            Years in the TimeSpan
            </summary>
      <param name="Span">TimeSpan to get the years from</param>
      <returns>The number of years that the TimeSpan has</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TimeSpanExtensions.ToStringFull(System.TimeSpan)">
      <summary>
            Converts the input to a string in this format:
            (Years) years, (Months) months, (DaysRemainder) days, (Hours) hours, (Minutes) minutes, (Seconds) seconds
            </summary>
      <param name="Input">Input TimeSpan</param>
      <returns>The TimeSpan as a string</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.IComparableExtensions">
      <summary>
            IComparable extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IComparableExtensions.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Checks if an item is between two values
            </summary>
      <typeparam name="T">Type of the value</typeparam>
      <param name="Value">Value to check</param>
      <param name="Min">Minimum value</param>
      <param name="Max">Maximum value</param>
      <param name="Comparer">Comparer used to compare the values (defaults to GenericComparer)"</param>
      <returns>True if it is between the values, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IComparableExtensions.Clamp``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Clamps a value between two values
            </summary>
      <param name="Value">Value sent in</param>
      <param name="Max">Max value it can be (inclusive)</param>
      <param name="Min">Min value it can be (inclusive)</param>
      <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
      <returns>The value set between Min and Max</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IComparableExtensions.Max``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the maximum value between the two
            </summary>
      <param name="InputA">Input A</param>
      <param name="InputB">Input B</param>
      <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
      <returns>The maximum value</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IComparableExtensions.Min``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Returns the minimum value between the two
            </summary>
      <param name="InputA">Input A</param>
      <param name="InputB">Input B</param>
      <param name="Comparer">Comparer to use (defaults to GenericComparer)</param>
      <returns>The minimum value</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.DelegateExtensions">
      <summary>
            Extensions for Func, Action, and EventHandler
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DelegateExtensions.Raise``1(System.Action{``0},``0)">
      <summary>
            Safely calls the specified action
            </summary>
      <typeparam name="T">The type of the event args</typeparam>
      <param name="Delegate">The delegate</param>
      <param name="EventArgs">The event args</param>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DelegateExtensions.Raise``1(System.EventHandler{``0},System.Object,``0)">
      <summary>
            Safely raises the event
            </summary>
      <typeparam name="T">The type of the event args</typeparam>
      <param name="Delegate">The delegate</param>
      <param name="Sender">The sender</param>
      <param name="EventArg">The event args</param>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.DelegateExtensions.Raise``2(System.Func{``0,``1},``0)">
      <summary>
            Safely calls the Func
            </summary>
      <typeparam name="T1">The event arg type</typeparam>
      <typeparam name="T2">The return type</typeparam>
      <param name="Delegate">The delegate</param>
      <param name="EventArgs">The event args</param>
      <returns>The value returned by the function</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.ExceptionExtensions">
      <summary>
            Class for housing exception specific extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ExceptionExtensions.ToString(System.Exception,System.String,System.String)">
      <summary>
            Converts the exception to a string and appends the specified prefix/suffix (used for logging)
            </summary>
      <param name="Exception">Exception to convert</param>
      <param name="Prefix">Prefix</param>
      <param name="Suffix">Suffix</param>
      <returns>The exception as a string</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.StringExtensions">
      <summary>
            String and StringBuilder extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.AlphaCharactersOnly(System.String)">
      <summary>
            Keeps only alpha characters
            </summary>
      <param name="Input">Input string</param>
      <returns>the string only containing alpha characters</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.AlphaNumericOnly(System.String)">
      <summary>
            Keeps only alphanumeric characters
            </summary>
      <param name="Input">Input string</param>
      <returns>the string only containing alphanumeric characters</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
      <summary>
            Does an AppendFormat and then an AppendLine on the StringBuilder
            </summary>
      <param name="Builder">Builder object</param>
      <param name="Format">Format string</param>
      <param name="Objects">Objects to format</param>
      <returns>The StringBuilder passed in</returns>
      <requires description="Format" exception="T:System.ArgumentNullException" csharp="!IsNullOrEmpty(Format)" vb="Not IsNullOrEmpty(Format)">!string.IsNullOrEmpty(Format)</requires>
      <exception cref="T:System.ArgumentNullException">string.IsNullOrEmpty(Format)</exception>
      <requires description="Objects" exception="T:System.ArgumentNullException" csharp="Objects != null" vb="Objects &lt;&gt; Nothing">Objects != null</requires>
      <exception cref="T:System.ArgumentNullException">Objects==null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.Center(System.String,System.Int32,System.String)">
      <summary>
            Centers the input string (if it's longer than the length) and pads it using the padding string
            </summary>
      <param name="Input" />
      <param name="Length" />
      <param name="Padding" />
      <returns>The centered string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.Encode(System.String,System.Text.Encoding,System.Text.Encoding)">
      <summary>
            Converts a string to a string of another encoding
            </summary>
      <param name="Input">input string</param>
      <param name="OriginalEncodingUsing">The type of encoding the string is currently using</param>
      <param name="EncodingUsing">The type of encoding the string is converted into (defaults to UTF8)</param>
      <returns>string of the byte array</returns>
      <requires description="OriginalEncodingUsing" exception="T:System.ArgumentNullException" csharp="OriginalEncodingUsing != null" vb="OriginalEncodingUsing &lt;&gt; Nothing">OriginalEncodingUsing != null</requires>
      <exception cref="T:System.ArgumentNullException">OriginalEncodingUsing == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ExpandTabs(System.String,System.Int32)">
      <summary>
            Expands tabs and replaces them with spaces
            </summary>
      <param name="Input">Input string</param>
      <param name="TabSize">Number of spaces</param>
      <returns>The input string, with the tabs replaced with spaces</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FilterOutText(System.String,System.String)">
      <summary>
            Removes the filter text from the input.
            </summary>
      <param name="Input">Input text</param>
      <param name="Filter">Regex expression of text to filter out</param>
      <returns>The input text minus the filter text.</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.String,Utilities.DataTypes.Formatters.Interfaces.IStringFormatter)">
      <summary>
            Formats a string based on a format string passed in.
            The default formatter uses the following format:
            # = digits
            @ = alpha characters
            \ = escape char
            </summary>
      <param name="Input">Input string</param>
      <param name="Format">Format of the output string</param>
      <param name="Provider">String formatter provider (defaults to GenericStringFormatter)</param>
      <returns>The formatted string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.Object,System.String,System.String)">
      <summary>
            Formats a string based on the object's properties
            </summary>
      <param name="Input">Input string</param>
      <param name="Object">Object to use to format the string</param>
      <param name="StartSeperator">Seperator character/string to use to describe the start of the property name</param>
      <param name="EndSeperator">Seperator character/string to use to describe the end of the property name</param>
      <returns>The formatted string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FormatString(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
      <summary>
            Formats a string based on the key/value pairs that are sent in
            </summary>
      <param name="Input">Input string</param>
      <param name="Pairs">Key/value pairs. Replaces the key with the corresponding value.</param>
      <returns>The string after the changes have been made</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String,System.Text.Encoding)">
      <summary>
            Converts base 64 string based on the encoding passed in
            </summary>
      <param name="Input">Input string</param>
      <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
      <returns>string in the encoding format</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.FromBase64(System.String)">
      <summary>
            Converts base 64 string to a byte array
            </summary>
      <param name="Input">Input string</param>
      <returns>A byte array equivalent of the base 64 string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.IsCreditCard(System.String)">
      <summary>
            Checks if a credit card number is valid
            </summary>
      <param name="CreditCardNumber">Number to check</param>
      <returns>True if it is valid, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.IsAnagram(System.String,System.String)">
      <summary>
            Determines if the two strings are anagrams or not
            </summary>
      <param name="Input1">Input 1</param>
      <param name="Input2">Input 2</param>
      <returns>True if they are anagrams, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.IsUnicode(System.String)">
      <summary>
            Determines if a string is unicode
            </summary>
      <param name="Input">Input string</param>
      <returns>True if it's unicode, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.KeepFilterText(System.String,System.String)">
      <summary>
            Removes everything that is not in the filter text from the input.
            </summary>
      <param name="Input">Input text</param>
      <param name="Filter">Regex expression of text to keep</param>
      <returns>The input text minus everything not in the filter text.</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.Left(System.String,System.Int32)">
      <summary>
            Gets the first x number of characters from the left hand side
            </summary>
      <param name="Input">Input string</param>
      <param name="Length">x number of characters to return</param>
      <returns>The resulting string</returns>
      <requires description="Length" exception="T:System.ArgumentOutOfRangeException" csharp="Length &gt; 0" vb="Length &gt; 0">Length &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Length &lt;= 0</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.LevenshteinDistance(System.String,System.String)">
      <summary>
            Calculates the Levenshtein distance
            </summary>
      <param name="Value1">Value 1</param>
      <param name="Value2">Value 2</param>
      <returns>The Levenshtein distance</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.MaskLeft(System.String,System.Int32,System.Char)">
      <summary>
            Masks characters to the left ending at a specific character
            </summary>
      <param name="Input">Input string</param>
      <param name="EndPosition">End position (counting from the left)</param>
      <param name="Mask">Mask character to use</param>
      <returns>The masked string</returns>
      <requires description="Input" exception="T:System.ArgumentNullException" csharp="Input != null" vb="Input &lt;&gt; Nothing">Input != null</requires>
      <exception cref="T:System.ArgumentNullException">Input == null</exception>
      <requires description="EndPosition" exception="T:System.ArgumentOutOfRangeException" csharp="EndPosition &gt;= 0 &amp;&amp; EndPosition &lt; Input.Length" vb="EndPosition &gt;= 0 AndAlso EndPosition &lt; Input.Length">EndPosition &gt;= 0 &amp;&amp; EndPosition &lt; Input.Length</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">EndPosition &lt; 0 || EndPosition &gt;= Input.Length</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.MaskRight(System.String,System.Int32,System.Char)">
      <summary>
            Masks characters to the right starting at a specific character
            </summary>
      <param name="Input">Input string</param>
      <param name="StartPosition">Start position (counting from the left)</param>
      <param name="Mask">Mask character to use</param>
      <returns>The masked string</returns>
      <requires description="Input" exception="T:System.ArgumentNullException" csharp="Input != null" vb="Input &lt;&gt; Nothing">Input != null</requires>
      <exception cref="T:System.ArgumentNullException">Input == null</exception>
      <requires description="StartPosition" exception="T:System.ArgumentOutOfRangeException" csharp="StartPosition &gt;= 0" vb="StartPosition &gt;= 0">StartPosition &gt;= 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">StartPosition &lt; 0</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.NextSequence(System.String,System.Char,System.Char)">
      <summary>
            Function that is useful for generating a string in a series. so a becomes b, b becomes c, etc. 
            and after hitting the max character, it goes to two characters (so ~ becomes aa, then ab, ac, etc).
            </summary>
      <param name="Sequence">Current sequence</param>
      <param name="Min">Min character</param>
      <param name="Max">Max character</param>
      <returns>The next item in the sequence</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.NumericOnly(System.String,System.Boolean)">
      <summary>
            Keeps only numeric characters
            </summary>
      <param name="Input">Input string</param>
      <param name="KeepNumericPunctuation">Determines if decimal places should be kept</param>
      <returns>the string only containing numeric characters</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.NumberTimesOccurs(System.String,System.String)">
      <summary>
            returns the number of times a string occurs within the text
            </summary>
      <param name="Input">input text</param>
      <param name="Match">The string to match (can be regex)</param>
      <returns>The number of times the string occurs</returns>
      <requires description="Match" exception="T:System.ArgumentNullException" csharp="!IsNullOrEmpty(Match)" vb="Not IsNullOrEmpty(Match)">!string.IsNullOrEmpty(Match)</requires>
      <exception cref="T:System.ArgumentNullException">string.IsNullOrEmpty(Match)</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.RegexFormat(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Uses a regex to format the input string
            </summary>
      <param name="Input">Input string</param>
      <param name="Format">Regex string used to</param>
      <param name="OutputFormat">Output format</param>
      <param name="Options">Regex options</param>
      <returns>The input string formatted by using the regex string</returns>
      <requires description="Input" exception="T:System.ArgumentNullException" csharp="!IsNullOrEmpty(Input)" vb="Not IsNullOrEmpty(Input)">!string.IsNullOrEmpty(Input)</requires>
      <exception cref="T:System.ArgumentNullException">string.IsNullOrEmpty(Input)</exception>
      <requires description="Format" exception="T:System.ArgumentNullException" csharp="!IsNullOrEmpty(Format)" vb="Not IsNullOrEmpty(Format)">!string.IsNullOrEmpty(Format)</requires>
      <exception cref="T:System.ArgumentNullException">string.IsNullOrEmpty(Format)</exception>
      <requires description="OutputFormat" exception="T:System.ArgumentNullException" csharp="!IsNullOrEmpty(OutputFormat)" vb="Not IsNullOrEmpty(OutputFormat)">!string.IsNullOrEmpty(OutputFormat)</requires>
      <exception cref="T:System.ArgumentNullException">string.IsNullOrEmpty(OutputFormat)</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.Reverse(System.String)">
      <summary>
            Reverses a string
            </summary>
      <param name="Input">Input string</param>
      <returns>The reverse of the input string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.Right(System.String,System.Int32)">
      <summary>
            Gets the last x number of characters from the right hand side
            </summary>
      <param name="Input">Input string</param>
      <param name="Length">x number of characters to return</param>
      <returns>The resulting string</returns>
      <requires description="Length" exception="T:System.ArgumentOutOfRangeException" csharp="Length &gt; 0" vb="Length &gt; 0">Length &gt; 0</requires>
      <exception cref="T:System.ArgumentOutOfRangeException">Length &lt;= 0</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.StripLeft(System.String,System.String)">
      <summary>
            Strips out any of the characters specified starting on the left side of the input string (stops when a character not in the list is found)
            </summary>
      <param name="Input">Input string</param>
      <param name="Characters">Characters to string (defaults to a space)</param>
      <returns>The Input string with specified characters stripped out</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.StripRight(System.String,System.String)">
      <summary>
            Strips out any of the characters specified starting on the right side of the input string (stops when a character not in the list is found)
            </summary>
      <param name="Input">Input string</param>
      <param name="Characters">Characters to string (defaults to a space)</param>
      <returns>The Input string with specified characters stripped out</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.StripIllegalXML(System.String)">
      <summary>
            Strips illegal characters for XML content
            </summary>
      <param name="Content">Content</param>
      <returns>The stripped string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ToBase64(System.String,System.Text.Encoding)">
      <summary>
            Converts from the specified encoding to a base 64 string
            </summary>
      <param name="Input">Input string</param>
      <param name="OriginalEncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
      <returns>Bas64 string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
      <summary>
            Converts a string to a byte array
            </summary>
      <param name="Input">input string</param>
      <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
      <returns>the byte array representing the string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ToFirstCharacterUpperCase(System.String)">
      <summary>
            Takes the first character of an input string and makes it uppercase
            </summary>
      <param name="Input">Input string</param>
      <returns>String with the first character capitalized</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ToSentenceCapitalize(System.String)">
      <summary>
            Capitalizes each sentence within the string
            </summary>
      <param name="Input">Input string</param>
      <returns>String with each sentence capitalized</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StringExtensions.ToTitleCase(System.String)">
      <summary>
            Capitalizes the first character of each word
            </summary>
      <param name="Input">Input string</param>
      <returns>String with each word capitalized</returns>
    </member>
    <member name="T:Utilities.DataTypes.Formatters.Interfaces.IStringFormatter">
      <summary>
            String formatter
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.Interfaces.IStringFormatter.Format(System.String,System.String)">
      <summary>
            Formats the string based on the pattern
            </summary>
      <param name="Input">Input string</param>
      <param name="FormatPattern">Format pattern</param>
      <returns>The formatted string</returns>
    </member>
    <member name="T:Utilities.DataTypes.Formatters.GenericStringFormatter">
      <summary>
            Generic string formatter
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.GetFormat(System.Type)">
      <summary>
            Gets the format associated with the type
            </summary>
      <param name="formatType">Format type</param>
      <returns>The appropriate formatter based on the type</returns>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>
            Formats the string
            </summary>
      <param name="format">Format to use</param>
      <param name="arg">Argument object to use</param>
      <param name="formatProvider">Format provider to use</param>
      <returns>The formatted string</returns>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.Format(System.String,System.String)">
      <summary>
            Formats the string based on the pattern
            </summary>
      <param name="Input">Input string</param>
      <param name="FormatPattern">Format pattern</param>
      <returns>The formatted string</returns>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.GetMatchingInput(System.String,System.Char,System.Char@)">
      <summary>
            Gets matching input
            </summary>
      <param name="Input">Input string</param>
      <param name="FormatChar">Current format character</param>
      <param name="MatchChar">The matching character found</param>
      <returns>The remainder of the input string left</returns>
    </member>
    <member name="M:Utilities.DataTypes.Formatters.GenericStringFormatter.IsValid(System.String)">
      <summary>
            Checks if the format pattern is valid
            </summary>
      <param name="FormatPattern">Format pattern</param>
      <returns>Returns true if it's valid, otherwise false</returns>
    </member>
    <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.DigitChar">
      <summary>
            Represents digits (defaults to #)
            </summary>
    </member>
    <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.AlphaChar">
      <summary>
            Represents alpha characters (defaults to @)
            </summary>
    </member>
    <member name="P:Utilities.DataTypes.Formatters.GenericStringFormatter.EscapeChar">
      <summary>
            Represents the escape character (defaults to \)
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions">
      <summary>
            Value type extension methods
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBool(System.Int32)">
      <summary>
            Turns an int into a bool
            </summary>
      <param name="Input">Int value</param>
      <returns>bool equivalent</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.ToInt(System.Boolean)">
      <summary>
            Converts the bool to an integer
            </summary>
      <param name="Value">Value to convert</param>
      <returns>The integer equivalent</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.ToBase64String(System.Byte[])">
      <summary>
            Converts a byte array into a base 64 string
            </summary>
      <param name="Input">Input array</param>
      <returns>The equivalent byte array in a base 64 string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.ToEncodedString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
      <summary>
            Converts a byte array to a string
            </summary>
      <param name="Input">input array</param>
      <param name="EncodingUsing">The type of encoding the string is using (defaults to UTF8)</param>
      <param name="Count">Number of bytes starting at the index to convert (use -1 for the entire array starting at the index)</param>
      <param name="Index">Index to start at</param>
      <returns>string of the byte array</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsControl(System.Char)">
      <summary>
            Is the character a control character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsDigit(System.Char)">
      <summary>
            Is the character a digit character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLetter(System.Char)">
      <summary>
            Is the character a letter character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLetterOrDigit(System.Char)">
      <summary>
            Is the character a letter or digit character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsLower(System.Char)">
      <summary>
            Is the character a lower case character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsNumber(System.Char)">
      <summary>
            Is the character a number character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsPunctuation(System.Char)">
      <summary>
            Is the character a punctuation character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsSurrogate(System.Char)">
      <summary>
            Is the character a surrogate character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsSymbol(System.Char)">
      <summary>
            Is the character a symbol character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsUpper(System.Char)">
      <summary>
            Is the character an upper case character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsWhiteSpace(System.Char)">
      <summary>
            Is the character a whitespace character
            </summary>
      <param name="Value">Value to check</param>
      <returns>True if it is, false otherwise</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ValueTypeExtensions.IsUnicode(System.Byte[])">
      <summary>
            Determines if a byte array is unicode
            </summary>
      <param name="Input">Input array</param>
      <returns>True if it's unicode, false otherwise</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions">
      <summary>
            ICollection extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds a list of items to the collection
            </summary>
      <typeparam name="T">The type of the items in the collection</typeparam>
      <param name="Collection">Collection</param>
      <param name="Items">Items to add</param>
      <returns>The collection with the added items</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null" vb="(() =&gt; {
    Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt; local_0_prime = New Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass1(Of T)();
    (local_0_prime.Collection = Collection)
    return local_0_prime; })().Collection &lt;&gt; Nothing">new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass1&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.Add``1(System.Collections.Generic.ICollection{``0},``0[])">
      <summary>
            Adds a list of items to the collection
            </summary>
      <typeparam name="T">The type of the items in the collection</typeparam>
      <param name="Collection">Collection</param>
      <param name="Items">Items to add</param>
      <returns>The collection with the added items</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass4&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null" vb="(() =&gt; {
    Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass4&lt;T&gt; local_0_prime = New Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass4(Of T)();
    (local_0_prime.Collection = Collection)
    return local_0_prime; })().Collection &lt;&gt; Nothing">new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass4&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.AddAndReturn``1(System.Collections.Generic.ICollection{``0},``0)">
      <summary>
            Adds an item to a list and returns the item
            </summary>
      <typeparam name="T">Item type</typeparam>
      <param name="Collection">Collection to add to</param>
      <param name="Item">Item to add to the collection</param>
      <returns>The original item</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="Collection != null" vb="Collection &lt;&gt; Nothing">Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
      <requires description="Item" exception="T:System.ArgumentNullException" csharp="(object)Item != null" vb="((Object)Item) &lt;&gt; Nothing">(object)Item != null</requires>
      <exception cref="T:System.ArgumentNullException">Item == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},``0[])">
      <summary>
            Adds items to the collection if it passes the predicate test
            </summary>
      <typeparam name="T">Collection type</typeparam>
      <param name="Collection">Collection to add to</param>
      <param name="Items">Items to add to the collection</param>
      <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
      <returns>True if any are added, false otherwise</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="Collection != null" vb="Collection &lt;&gt; Nothing">Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="Predicate != null" vb="Predicate &lt;&gt; Nothing">Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.AddIf``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
      <typeparam name="T">Collection type</typeparam>
      <param name="Collection">Collection to add to</param>
      <param name="Items">Items to add to the collection</param>
      <param name="Predicate">Predicate that an item needs to satisfy in order to be added</param>
      <returns>True if it is added, false otherwise</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="Collection != null" vb="Collection &lt;&gt; Nothing">Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="Predicate != null" vb="Predicate &lt;&gt; Nothing">Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
      <requires description="Items" exception="T:System.ArgumentNullException" csharp="Items != null" vb="Items &lt;&gt; Nothing">Items != null</requires>
      <exception cref="T:System.ArgumentNullException">Items == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},``0[])">
      <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
      <typeparam name="T">Collection type</typeparam>
      <param name="Collection">Collection to add to</param>
      <param name="Items">Items to add to the collection</param>
      <returns>True if it is added, false otherwise</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass7&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null" vb="(() =&gt; {
    Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass7&lt;T&gt; local_0_prime = New Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass7(Of T)();
    (local_0_prime.Collection = Collection)
    return local_0_prime; })().Collection &lt;&gt; Nothing">new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClass7&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.AddIfUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds an item to the collection if it isn't already in the collection
            </summary>
      <typeparam name="T">Collection type</typeparam>
      <param name="Collection">Collection to add to</param>
      <param name="Items">Items to add to the collection</param>
      <returns>True if it is added, false otherwise</returns>
      <requires description="Collection" exception="T:System.ArgumentNullException" csharp="new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClassa&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null" vb="(() =&gt; {
    Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClassa&lt;T&gt; local_0_prime = New Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClassa(Of T)();
    (local_0_prime.Collection = Collection)
    return local_0_prime; })().Collection &lt;&gt; Nothing">new Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.&lt;&gt;c__DisplayClassa&lt;T&gt;(){
    Collection = Collection, 
}.Collection != null</requires>
      <exception cref="T:System.ArgumentNullException">Collection == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
      <summary>
            Removes all items that fit the predicate passed in
            </summary>
      <typeparam name="T">The type of the items in the collection</typeparam>
      <param name="Collection">Collection to remove items from</param>
      <param name="Predicate">Predicate used to determine what items to remove</param>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.ICollectionExtensions.Remove``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Removes all items in the list from the collection
            </summary>
      <typeparam name="T">The type of the items in the collection</typeparam>
      <param name="Collection">Collection</param>
      <param name="Items">Items to remove</param>
      <returns>The collection with the items removed</returns>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.IDictionaryExtensions">
      <summary>
            IDictionary extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IDictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Gets the value from a dictionary or the default value if it isn't found
            </summary>
      <typeparam name="TKey">Key type</typeparam>
      <typeparam name="TValue">Value type</typeparam>
      <param name="Dictionary">Dictionary to get the value from</param>
      <param name="Key">Key to look for</param>
      <param name="Default">Default value if the key is not found</param>
      <returns>The value associated with the key or the default value if the key is not found</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
      <requires description="Dictionary" exception="T:System.ArgumentNullException" csharp="Dictionary != null" vb="Dictionary &lt;&gt; Nothing">Dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">Dictionary == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IDictionaryExtensions.SetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Sets the value in a dictionary
            </summary>
      <typeparam name="TKey">Key type</typeparam>
      <typeparam name="TValue">Value type</typeparam>
      <param name="Dictionary">Dictionary to set the value in</param>
      <param name="Key">Key to look for</param>
      <param name="Value">Value to add</param>
      <returns>The dictionary</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if the dictionary is null</exception>
      <requires description="Dictionary" exception="T:System.ArgumentNullException" csharp="Dictionary != null" vb="Dictionary &lt;&gt; Nothing">Dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">Dictionary == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IDictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
      <summary>
            Sorts a dictionary
            </summary>
      <typeparam name="T1">Key type</typeparam>
      <typeparam name="T2">Value type</typeparam>
      <param name="Dictionary">Dictionary to sort</param>
      <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
      <returns>The sorted dictionary</returns>
      <requires description="Dictionary" exception="T:System.ArgumentNullException" csharp="Dictionary != null" vb="Dictionary &lt;&gt; Nothing">Dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">Dictionary == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.IDictionaryExtensions.Sort``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{System.Collections.Generic.KeyValuePair{``0,``1},``2},System.Collections.Generic.IComparer{``2})">
      <summary>
            Sorts a dictionary
            </summary>
      <typeparam name="T1">Key type</typeparam>
      <typeparam name="T2">Value type</typeparam>
      <typeparam name="T3">Order by type</typeparam>
      <param name="Dictionary">Dictionary to sort</param>
      <param name="OrderBy">Function used to order the dictionary</param>
      <param name="Comparer">Comparer used to sort (defaults to GenericComparer)</param>
      <returns>The sorted dictionary</returns>
      <requires description="Dictionary" exception="T:System.ArgumentNullException" csharp="Dictionary != null" vb="Dictionary &lt;&gt; Nothing">Dictionary != null</requires>
      <exception cref="T:System.ArgumentNullException">Dictionary == null</exception>
      <requires description="OrderBy" exception="T:System.ArgumentNullException" csharp="OrderBy != null" vb="OrderBy &lt;&gt; Nothing">OrderBy != null</requires>
      <exception cref="T:System.ArgumentNullException">OrderBy == null</exception>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.MatchCollectionExtensions">
      <summary>
            MatchCollection extensions
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.MatchCollectionExtensions.Where(System.Text.RegularExpressions.MatchCollection,System.Predicate{System.Text.RegularExpressions.Match})">
      <summary>
            Gets a list of items that satisfy the predicate from the collection
            </summary>
      <param name="Collection">Collection to search through</param>
      <param name="Predicate">Predicate that the items must satisfy</param>
      <returns>The matches that satisfy the predicate</returns>
      <requires description="Predicate" exception="T:System.ArgumentNullException" csharp="Predicate != null" vb="Predicate &lt;&gt; Nothing">Predicate != null</requires>
      <exception cref="T:System.ArgumentNullException">Predicate == null</exception>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.StreamExtensions">
      <summary>
            Extension methods for Streams
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StreamExtensions.ReadAllBinary(System.IO.Stream)">
      <summary>
            Takes all of the data in the stream and returns it as an array of bytes
            </summary>
      <param name="Input">Input stream</param>
      <returns>A byte array</returns>
      <requires description="Input" exception="T:System.ArgumentNullException" csharp="Input != null" vb="Input &lt;&gt; Nothing">Input != null</requires>
      <exception cref="T:System.ArgumentNullException">Input == null</exception>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.StreamExtensions.ReadAll(System.IO.Stream,System.Text.Encoding)">
      <summary>
            Takes all of the data in the stream and returns it as a string
            </summary>
      <param name="Input">Input stream</param>
      <param name="EncodingUsing">Encoding that the string should be in (defaults to UTF8)</param>
      <returns>A string containing the content of the stream</returns>
      <requires description="Input" exception="T:System.ArgumentNullException" csharp="Input != null" vb="Input &lt;&gt; Nothing">Input != null</requires>
      <exception cref="T:System.ArgumentNullException">Input == null</exception>
    </member>
    <member name="T:Utilities.DataTypes.ExtensionMethods.TypeConversionExtensions">
      <summary>
            Extensions converting between types, checking if something is null, etc.
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TypeConversionExtensions.FormatToString(System.Object,System.String)">
      <summary>
            Calls the object's ToString function passing in the formatting
            </summary>
      <param name="Input">Input object</param>
      <param name="Format">Format of the output string</param>
      <returns>The formatted string</returns>
    </member>
    <member name="M:Utilities.DataTypes.ExtensionMethods.TypeConversionExtensions.CallMethod(System.String,System.Object,System.Object[])">
      <summary>
            Calls a method on an object
            </summary>
      <param name="MethodName">Method name</param>
      <param name="Object">Object to call the method on</param>
      <param name="InputVariables">(Optional)input variables for the method</param>
      <returns>The returned value of the method</returns>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.BaseEventArgs">
      <summary>
            Base event args for the events used in the system
            </summary>
    </member>
    <member name="P:Utilities.DataTypes.EventArgs.BaseEventArgs.Stop">
      <summary>
            Should the event be stopped?
            </summary>
    </member>
    <member name="P:Utilities.DataTypes.EventArgs.BaseEventArgs.Content">
      <summary>
            Content of the event
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.SavedEventArgs">
      <summary>
            Saved event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.SavingEventArgs">
      <summary>
            Saving event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.DeletedEventArgs">
      <summary>
            Deleted event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.DeletingEventArgs">
      <summary>
            Deleting event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.ChangedEventArgs">
      <summary>
            Changed event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.LoadedEventArgs">
      <summary>
            Loaded event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.LoadingEventArgs">
      <summary>
            Loading event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.OnStartEventArgs">
      <summary>
            On start event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.OnEndEventArgs">
      <summary>
            On end event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.EventArgs.OnErrorEventArgs">
      <summary>
            On error event args
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.Patterns.IFluentInterface">
      <summary>
            Helps in fluent interface design to hide
            ToString, Equals, and GetHashCode
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.Equals(System.Object)">
      <summary>
            Hides equals
            </summary>
      <param name="obj" />
      <returns />
    </member>
    <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.GetHashCode">
      <summary>
            Hides GetHashCode
            </summary>
      <returns />
    </member>
    <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.ToString">
      <summary>
            Hides ToString
            </summary>
      <returns />
    </member>
    <member name="M:Utilities.DataTypes.Patterns.IFluentInterface.GetType">
      <summary>
            Hides GetType
            </summary>
      <returns />
    </member>
    <member name="T:Utilities.DataTypes.Patterns.Factory`2">
      <summary>
            Factory class
            </summary>
      <typeparam name="Key">The "message" type</typeparam>
      <typeparam name="T">The class type that you want created</typeparam>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.Factory`2.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.Factory`2.Register(`0,`1)">
      <summary>
            Registers an item
            </summary>
      <param name="Key">Item to register</param>
      <param name="Result">The object to be returned</param>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.Factory`2.Register(`0,System.Func{`1})">
      <summary>
            Registers an item
            </summary>
      <param name="Key">Item to register</param>
      <param name="Constructor">The function to call when creating the item</param>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.Factory`2.Create(`0)">
      <summary>
            Creates an instance associated with the key
            </summary>
      <param name="Key">Registered item</param>
      <returns>The type returned by the initializer</returns>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.Factory`2.Exists(`0)">
      <summary>
            Determines if a key has been registered
            </summary>
      <param name="Key">Key to check</param>
      <returns>True if it exists, false otherwise</returns>
    </member>
    <member name="P:Utilities.DataTypes.Patterns.Factory`2.Constructors">
      <summary>
            List of constructors/initializers
            </summary>
    </member>
    <member name="T:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass">
      <summary>
            Base class used for disposable objects
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.#ctor">
      <summary>
            Construct
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Dispose">
      <summary>
            Dispose function
            </summary>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Dispose(System.Boolean)">
      <summary>
            Function to override in order to dispose objects
            </summary>
      <param name="Managed">If true, managed and unmanaged objects should be disposed. Otherwise unmanaged objects only.</param>
    </member>
    <member name="M:Utilities.DataTypes.Patterns.BaseClasses.SafeDisposableBaseClass.Finalize">
      <summary>
            Destructor
            </summary>
    </member>
  </members>
</doc>